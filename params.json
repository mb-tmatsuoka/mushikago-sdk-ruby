{"tagline":"mushikago SDK for Ruby","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mushikago-sdk-ruby","body":"Mushikago SDK for Ruby.\r\n=======================\r\n\r\n- **Homepage**:        [http://www.mushikago.org/](http://www.mushikago.org/)\r\n- **Author**:          MiningBrownie\r\n- **Copyright**:       2011\r\n- **License**:         Apache License, Version 2.0\r\n- **Latest Version**:  2.1.0\r\n- **Release Date**:    May 30th 2012\r\n\r\n\r\n概要\r\n----\r\n\r\n[株式会社マイニングブラウニー](http://www.miningbrownie.co.jp/)が提供する[mushikago web service](http://www.mushikago.org/)を、Rubyから扱うためのライブラリです。\r\n\r\n\r\n機能一覧\r\n--------\r\n\r\n**1.mitsubachiを利用する**: [mitsubachi](http://www.mushikago.org/mitsubachi/)はウェブサイトをクローリングするためのクラウドプラットフォームサービスです。\r\n環境構築などの準備を一切必要とせず、ユーザーは簡易なスクリプトをmitsubachiサーバにアップロード するだけで、ウェブ上の欲しい情報を高速に収集し保存します。ユーザーは、少しの技術力とアイデアを持っていれば、新たなクローラビジネスを始める事ができます。\r\n\r\n**2.hotaruを利用する**: [hotaru](http://www.mushikago.org/hotaru/)とは、自然言語処理を行うSaaS型のサービスです。\r\nhotaruは日本語や英語など、多言語の解析に対応でき、それらの機能を初期費用が掛からず安価なコストから利用できます。また、同じmushikagoのサービスであるmitsubachiを使って、ウェブ上のレビューやブログなどの文章を取得してhotaruで解析するといった様に、 mushikago内のサービスと連携しやすいことも大きな利点です。\r\n\r\n**3.hanamgriを利用する**: [hanamgri](http://www.mushikago.org/hanamgri/)とは、さまざまなレイアウトのウェブページから特定のデータを抽出するサービスです。\r\nwebサイトの構成やレイアウトを意識することなく「欲しい項目」「欲しい項目の周辺にありそうなキーワード」「欲しい情報がありそうなURL」をhanamgriに渡すだけで利用できます。 \r\n\r\nインストール方法\r\n----------------\r\n\r\nMushikago SDK for Rubyはgemを使ってインストールします。\r\n\r\n    $ gem install mushikago-sdk\r\n\r\n(root権限が必要な場合は`sudo`を使ってください。)\r\n\r\n\r\n使い方\r\n------\r\n\r\n### mitsubachiを利用する\r\n\r\n以下のコードで[mitsubachi](http://www.mushikago.org/mitsubachi/)を利用することができます。\r\nスクリプトファイルの記述方法は[ドキュメント](http://www.mushikago.org/mitsubachi/dev/doc/deploy/)を参照して下さい。\r\n\r\n    require 'mushikago'\r\n    \r\n    client = Mushikago::Mitsubachi::Client.new(:api_key => '<APIキー>', :secret_key => '<シークレットキー>')\r\n    \r\n    project_name = 'sample_project'\r\n    \r\n    # プロジェクト作成\r\n    client.project_create(project_name)\r\n    \r\n    # スクリプトファイルデプロイ\r\n    client.script_deploy(project_name, 'sample.rb')\r\n    \r\n    # クロール開始\r\n    client.http_fetch(project_name, 'http://www.mushikago.org/', 'sample.rb')\r\n    \r\n    # クロール終了まで待機\r\n    sleep 1 until client.project_queues(project_name)['count'] == 0\r\n    \r\n    # クロールログ確認\r\n    log_files = client.resource_list(project_name, :filter => 'log/stdout')\r\n    \r\n    # ログファイルURL取得\r\n    log_files['files'].each do |file|\r\n      ret = client.resource_get(project_name, file['name'])\r\n      puts ret['url']\r\n    end\r\n\r\n### hotaruを利用する\r\n\r\n以下のコードで[hotaru](http://www.mushikago.org/hotaru/)を利用することができます。\r\n\r\n    require 'mushikago'\r\n    \r\n    client = Mushikago::Hotaru::Client.new(:api_key => '<APIキー>', :secret_key => '<シークレットキー>')\r\n    \r\n    domain_name = 'sample_domain'\r\n    \r\n    # ドメイン作成\r\n    client.domain_create(domain_name, 'english', :tags => ['negative', 'positive'])\r\n    \r\n    # テキスト登録\r\n    client.text_put(domain_name, 'This is too bad.', ['negative'])\r\n    client.text_put(domain_name, 'This is very good.', ['positive'])\r\n    \r\n    # 登録されたテキストの学習が完了するまでsleep\r\n    sleep 1 until client.text_list(domain_name)['texts'].all?{|text| text['status'] == 'complete'}\r\n    \r\n    # クラス判定\r\n    result = client.classifier_judge(domain_name, 'good bye!')\r\n    puts result['tag']\r\n    # => positive\r\n    \r\n    # 共起グラフ作成\r\n    result = client.collocation_create(domain_name, ['negative', 'positive'])\r\n    collocation_id = result['collocation_id']\r\n    \r\n    # 共起グラフの作成が完了するまでsleep\r\n    sleep 1 until client.collocation_list(domain_name)['collocations'].all?{|col| col['status'] == 'error' || col['status'] == 'complete'}\r\n    \r\n    # 共起語取得\r\n    result = client.collocation_get(domain_name, collocation_id, 'This')\r\n    puts result['words']\r\n    # => [{\"word\"=>\"bad\", \"score\"=>4.4986811569504646},\r\n    #     {\"word\"=>\"good\", \"score\"=>4.4986811569504646},\r\n    #     {\"word\"=>\"too\", \"score\"=>4.4986811569504646},\r\n    #     {\"word\"=>\"very\", \"score\"=>4.4986811569504646},\r\n    #     {\"word\"=>\"is\", \"score\"=>3.3137419313374643}]\r\n\r\n\r\n#### APIキーとシークレットキーの設定方法\r\n\r\nAPIキーとシークレットキーは以下の方法でも設定することができます。\r\n\r\n**YAMLファイルを利用する場合**\r\n\r\n以下のYAMLファイルを用意します。\r\n\r\n<pre class=\"code\">\r\napi_key:&lt;APIキー&gt;\r\nsecret_key:&lt;シークレットキー&gt;\r\n</pre>\r\n\r\n以下のコードでYAMLファイルを読み込んで使用してください。\r\n\r\n    require 'rubygems'\r\n    require 'mushikago'\r\n\r\n    Mushikago.config.load(YAML.load(File.read('config.yml')))\r\n\r\n    client = Mushikago::Tombo::Client.new\r\n\r\n**環境変数を利用する場合**\r\n\r\n環境変数MUSHIKAGO_API_KEYとMUSHIKAGO_SECRET_KEYにそれぞれAPIキーとシークレットキーの設定を行います。\r\n\r\n<pre class=\"code\">\r\n$ export MUSHIKAGO_API_KEY=&lt;APIキー&gt;\r\n$ export MUSHIKAGO_SECRET_KEY=&lt;シークレットキー&gt;\r\n</pre>\r\n\r\n    require 'rubygems'\r\n    require 'mushikago'\r\n\r\n    client = Mushikago::Tombo::Client.new\r\n\r\n\r\n変更履歴\r\n--------\r\n\r\n- **May.30.12**: 2.1.0 release\r\n  - hanamgri(β)サポート\r\n- **May.23.12**: 2.0.0 release\r\n  - hanamgriのベータサポート\r\n- **Feb.20.12**: 0.4.2 release\r\n  - tomboのcaptureオプション「delay_time」に対応\r\n- **Feb.20.12**: 0.4.0 release\r\n  - 新サービス「hotaru」対応\r\n- **Feb.14.12**: 0.3.7 release\r\n  - Multipartでアップロードするファイルの最後に改行が付与される件修正\r\n- **Jan.27.12**: 0.3.6 release\r\n  - resource_get,script_getに:with_bodyオプション追加\r\n- **Jan.27.12**: 0.3.4 release\r\n  - 数字を含むリクエストの不具合に対応\r\n- **Jan.26.12**: 0.3.2 release\r\n  - mitsubachiに対応\r\n- **Sep.13.11**: 0.2.3 release\r\n  - captureメソッドのuseragentに対応\r\n- **Sep.8.11**: 0.2.1 release\r\n  - ライセンスをApache License, Version 2.0に変更\r\n- **Sep.6.11**: 0.1.8 release\r\n  - Mushikago SDK for Ruby新規作成\r\n  - Tombo サポート\r\n\r\n","google":""}